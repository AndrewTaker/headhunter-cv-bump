name: Deploy to VPS (Corrected Backup Order)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  WEB_APP_NAME: "hhcv-web"
  SCHEDULER_APP_NAME: "hhcv-scheduler"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.3'

      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o "${{ env.WEB_APP_NAME }}" ./web
          GOOS=linux GOARCH=amd64 go build -o "${{ env.SCHEDULER_APP_NAME }}" ./scheduler

      - name: Create backup on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p "${{ secrets.VPS_BACKUP_PATH }}" || { echo "Failed to create backup directory. Aborting."; exit 1; }
            echo "Backing up current deployment from '${{ secrets.VPS_PATH }}/' to '${{ secrets.VPS_BACKUP_PATH }}/'..."
            rsync -av --delete "${{ secrets.VPS_PATH }}/" "${{ secrets.VPS_BACKUP_PATH }}/" || { echo "Backup failed! Aborting."; exit 1; }

      - name: Upload new binaries and templates to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: "${{ env.WEB_APP_NAME }},${{ env.SCHEDULER_APP_NAME }},templates,web.service.template,scheduler.service.template"
          target: ${{ secrets.VPS_PATH }}

      - name: Render Services and Restart on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_SSH_PORT }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            VPS_ROOT="${{ secrets.VPS_PATH }}"
            WEB_APP_BINARY="${VPS_ROOT}/${{ env.WEB_APP_NAME }}"
            SCHEDULER_APP_BINARY="${VPS_ROOT}/${{ env.SCHEDULER_APP_NAME }}"

            # service vars
            export APP_USER="${{ secrets.S_APP_USER }}"
            export APP_GROUP="${{ secrets.S_APP_GROUP }}"
            export APP_WORKING_DIR="${{ secrets.S_WORKING_DIR }}"
            export APP_ENV_PATH="${{ secrets.S_ENV_PATH }}"

            echo "Rendering and applying systemd service files..."
            if [ -f "${VPS_ROOT}/web.service.template" ]; then
              envsubst \
                -v APP_USER="${APP_USER}" \
                -v APP_GROUP="${APP_GROUP}" \
                -v APP_WORKING_DIR="${APP_WORKING_DIR}" \
                -v APP_ENV_PATH="${APP_ENV_PATH}" \
                -v APP_BIN_PATH="${WEB_APP_BINARY}" \
                < "${VPS_ROOT}/${{ env.WEB_APP_NAME }}.service.template" \
                | sudo tee "/etc/systemd/system/${{ env.WEB_APP_NAME }}.service" > /dev/null
            else
              echo "Error: Web service template not found at ${VPS_ROOT}/${{ env.WEB_APP_NAME }}.service.template"
              exit 1
            fi

            if [ -f "${VPS_ROOT}/scheduler.service.template" ]; then
              envsubst \
                -v APP_USER="${APP_USER}" \
                -v APP_GROUP="${APP_GROUP}" \
                -v APP_WORKING_DIR="${APP_WORKING_DIR}" \
                -v APP_ENV_PATH="${APP_ENV_PATH}" \
                -v APP_BIN_PATH="${SCHEDULER_APP_BINARY}" \
                < "${VPS_ROOT}/${{ env.WEB_APP_NAME }}.service.template" \
                | sudo tee "/etc/systemd/system/${{ env.WEB_APP_NAME }}.service" > /dev/null
            else
              echo "Error: Web service template not found at ${VPS_ROOT}/${{ env.WEB_APP_NAME }}.service.template"
              exit 1
            fi

            echo "Reloading systemd daemon and restarting services..."
            sudo systemctl daemon-reload || { echo "Daemon reload failed! Aborting."; exit 1; }
            sudo systemctl restart "${WEB_APP_NAME}" || { echo "Failed to restart web service. Aborting."; exit 1; }
            sudo systemctl restart "${SCHEDULER_APP_NAME}" || { echo "Failed to restart scheduler service. Aborting."; exit 1; }
